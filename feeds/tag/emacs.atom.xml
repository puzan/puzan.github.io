<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Puzan's Pages</title><link href="http://puzan.info/" rel="alternate"></link><link href="http://puzan.info/feeds/tag/emacs.atom.xml" rel="self"></link><id>http://puzan.info/</id><updated>2014-08-19T00:00:00+04:00</updated><entry><title>EDE боль</title><link href="http://puzan.info/linux/2014-08-19-ede-bol.html" rel="alternate"></link><published>2014-08-19T00:00:00+04:00</published><author><name>Ilya Zonov</name></author><id>tag:puzan.info,2014-08-19:linux/2014-08-19-ede-bol.html</id><summary type="html">&lt;p&gt;Примерно раз  в год я возвращаюсь  к работе над некоторыми  &lt;em&gt;C/C++&lt;/em&gt; проектами. И
каждый  раз я  сталкиваюсь с  неудобствами работы  &lt;strong&gt;CEDET +  EDE&lt;/strong&gt;.  Сначала  я
попробую описать  свои невзгоды, а в  конце предложу свой вариант  сделать жизнь
чуточку лучше. Комментарии приветствуются.&lt;/p&gt;
&lt;p&gt;Какова вообще задача  использовать &lt;em&gt;EDE&lt;/em&gt;? Я хочу указать  где-то все зависимости
для конкретного проекта и передать эту  информацию в &lt;em&gt;semantic&lt;/em&gt; для навигации по
коду  и авто  дополнений. И  есть (по-моему  здравое) желание  не смешивать  эту
информацию для  различных проектов. По-идее  большего от  &lt;em&gt;EDE&lt;/em&gt; мне не  надо. Ну
может еще команду для сборки  проекта добавить. Хотя предпочитаю делать подобное
в  отдельно  взятой  консоли.  Итак,   что  нам  предлатает  &lt;em&gt;Emacs  Development
Environment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Пара  слов про  проекты по-умолчанию  (то  что создается  с помощью  &lt;code&gt;ede-new&lt;/code&gt;).
Больше  всего меня  бесит  настройка через  &lt;em&gt;customize&lt;/em&gt;-подобный интерфейс.   Им
вообще не пользоваться  для настройки &lt;strong&gt;Emacs'а&lt;/strong&gt; в принципе.   Если пойдешь сам
что-то  править в  &lt;em&gt;EDE&lt;/em&gt;  файле, то  точно натолкнешься  на  беду.  Как  минимум
придется перезапускать &lt;strong&gt;Emacs&lt;/strong&gt;  или пересоздавать проект.  Кроме  того, либо я
что-то  потерял, либо  в проекте  по-умолчанию нельзя  указать список  &lt;em&gt;include&lt;/em&gt;
папок.   Смысла в  данном  типе EDE-проекта  на мой  взгляд  нет.  Можно  видимо
использовать  его для  генерации &lt;em&gt;make&lt;/em&gt;-файлов,  но как  показывает практика  их
писать и поддерживать лучше самому.  &lt;strong&gt;Automake&lt;/strong&gt; и подобное вам в помощь.&lt;/p&gt;
&lt;p&gt;Также  с помощью  &lt;em&gt;EDE&lt;/em&gt; можно  добавить  и работать  с некоторыми  существующими
проектами. Например,  есть проекты для &lt;em&gt;C/C++&lt;/em&gt;  (&lt;code&gt;ede-cpp-root-project&lt;/code&gt;), &lt;em&gt;Java&lt;/em&gt;
(&lt;code&gt;ede-java-root-project&lt;/code&gt;)  и  другие.   В  них как  раз  можно  указать  внешние
зависимости, и Semantic  с переменным успехом их обрабатывает. Но  есть одно но:
почему-то  эти  настройки  нельзя  положить в  &lt;code&gt;Project.ede&lt;/code&gt;  файл  для  полного
счастья.&lt;/p&gt;
&lt;p&gt;Видел такое решение:  указать настройки всех проектов  в конфигурационных файлах
&lt;strong&gt;Emacs&lt;/strong&gt;.  Это мне  тоже не нравится.  Моя &lt;strong&gt;Emacs&lt;/strong&gt; конфигурация  все пухнет и
пухнет,  как я  не пытаюсь  ее аккуратно  структурировать.  Если  еще там  будет
информация о всех проектах жизнь станет ужасна.&lt;/p&gt;
&lt;p&gt;Была  у  меня  идея  положить  все настройки  в  &lt;code&gt;.dir-locals.el&lt;/code&gt;.   Но  тут  мы
сталкиваемся с  проблемой множественного создания  одного и того же  проекта для
каждого  открытого файла.   По-идее можно  написать всю  обработку этого  случая
внутри &lt;code&gt;.dir-locals.el&lt;/code&gt;,  но так пришлось бы  тянуть и копировать это  решение в
каждый проект. Не айс. Хочется более универсального решения.&lt;/p&gt;
&lt;p&gt;В общем к чему это я все. Для себя я написал небольшой хук для &lt;em&gt;c-mode&lt;/em&gt;, который
загружает конфигурацию проекта из &lt;code&gt;.Project&lt;/code&gt; файла, если он еще не был загружен.
Также он  обновляет список &lt;em&gt;include&lt;/em&gt;  путей для &lt;code&gt;clang&lt;/code&gt;, который  используется в
&lt;code&gt;auto-complete-clang&lt;/code&gt; и &lt;code&gt;flycheck&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;init/project-update&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;proj-file&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.Project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ede-proj&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ede-current-project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;proj-dir-tmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;locate-dominating-file&lt;/span&gt; &lt;span class="nv"&gt;buffer-file-name&lt;/span&gt; &lt;span class="nv"&gt;proj-file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;proj-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;proj-dir-tmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt; &lt;span class="nv"&gt;proj-dir-tmp&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;root-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;ede-proj&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ede-project-root-directory&lt;/span&gt; &lt;span class="nv"&gt;ede-proj&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;proj-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;equal&lt;/span&gt; &lt;span class="nv"&gt;proj-dir&lt;/span&gt; &lt;span class="nv"&gt;root-dir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;load project %s&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;proj-dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;default-directory&lt;/span&gt; &lt;span class="nv"&gt;proj-dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt; &lt;span class="nv"&gt;proj-file&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;ede-proj&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ede-current-project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;root-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;ede-proj&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ede-project-root-directory&lt;/span&gt; &lt;span class="nv"&gt;ede-proj&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;root-dir&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;flycheck-clang-include-path&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mapcar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;root-dir&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;oref&lt;/span&gt; &lt;span class="nv"&gt;ede-proj&lt;/span&gt; &lt;span class="nv"&gt;include-path&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;make-variable-buffer-local&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;ac-clang-flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ac-clang-flags&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mapcar&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-I&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="nv"&gt;flycheck-clang-include-path&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А сам  .Project файл лежит  в корне проекта  и содержит только  описание проекта
(как видите реальной проверки на это нету). Например вот такое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ede-cpp-root-project&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NewProject&amp;quot;&lt;/span&gt;
                      &lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NewProject&amp;quot;&lt;/span&gt;
                      &lt;span class="ss"&gt;:file&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Makefile&amp;quot;&lt;/span&gt;
                      &lt;span class="ss"&gt;:include-path&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/inc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="ss"&gt;:system-include-path&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/usr/include/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="ss"&gt;:spp-table&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PROJECT_EXPORT&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В душе я надеюсь, что я что-то делаю не так, что все в реальности легко и просто
настраивается. Что  на самом деле  я просто где-то пропустил  правильный вариант
настройки  в  мануале &lt;em&gt;CEDET&lt;/em&gt;.   Если  это  действительно  так, укажите  на  мою
ошибку. Если же эти хуки являются единственным вариантом для удовлетворения моих
запросов,  то  оформлю  минорный   мод  для  поддержки  автоматической  загрузки
проектов.  В общем  делитесь вашими вариантами и  впечатлениями от использования
&lt;em&gt;EDE&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. Все  эти негативные  впечатления от использования  &lt;em&gt;EDE&lt;/em&gt; видимо  возникли в
результате годового использования &lt;strong&gt;Eclipse&lt;/strong&gt; и &lt;strong&gt;Idea&lt;/strong&gt; для программирования на
&lt;em&gt;Java&lt;/em&gt;.   Пробовал  &lt;strong&gt;Emacs&lt;/strong&gt;  заточить  для  &lt;em&gt;Java&lt;/em&gt;,  но  затея  не  увенчалась
успехом. Но для &lt;em&gt;C/C++&lt;/em&gt; проектов только &lt;strong&gt;Emacs&lt;/strong&gt;, только хардкор.&lt;/p&gt;</summary><category term="emacs"></category><category term="cedet"></category><category term="ede"></category></entry><entry><title>Emacs + Java</title><link href="http://puzan.info/linux/2013-08-25-emacs-java.html" rel="alternate"></link><published>2013-08-25T00:00:00+04:00</published><author><name>Ilya Zonov</name></author><id>tag:puzan.info,2013-08-25:linux/2013-08-25-emacs-java.html</id><summary type="html">&lt;p&gt;Появилась у  меня в последнее  время необходимость основательно  познать &lt;em&gt;Java&lt;/em&gt;.
Очень долго  не смотрел в  его сторону, были  у меня некоторые  предубеждения. Я
всегда думал,  что &lt;em&gt;plain  C&lt;/em&gt; и  &lt;em&gt;Lisp&lt;/em&gt; это  наше все.   И этого  достаточно.  А
сейчас  работа повернулась  стороной  с &lt;em&gt;Java&lt;/em&gt;  лицом  и соответственно  захотел
быстренько познать его особенности, а  также настроить свой любимый редактор для
удобной работы с этим популярным языком программирования.&lt;/p&gt;
&lt;p&gt;Для  каждого языка  программирования в  &lt;em&gt;Emacs&lt;/em&gt; я  стараюсь настроить  следующие
возможности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Подсветка синтаксиса (есть из коробки)&lt;/li&gt;
&lt;li&gt;Авто дополнения (желательно через auto-complete)&lt;/li&gt;
&lt;li&gt;Навигация по коду&lt;/li&gt;
&lt;li&gt;Работа с проектами (опционально, люблю работать в консоли вне Emacs)&lt;/li&gt;
&lt;li&gt;REPL (также опционально, но очень помогает во время обучения)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Из коробки в &lt;code&gt;java-mode&lt;/code&gt; фактически  работает только подсветка синтаксиса. Cedet
идущий с  Emacs'ом также позваляет  настроить автодополнения и  навигацию внутри
классов.  Но  вот, например,  системные вещи  наотрез отказывается  предлагать в
качестве дополнений.&lt;/p&gt;
&lt;p&gt;В общем  я решил  посмотреть, какие сейчас  есть удобств для  работы с  &lt;em&gt;Java&lt;/em&gt; в
&lt;em&gt;Emacs&lt;/em&gt;. При этом я наткнулся на следующие вещи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdee.sourceforge.net/"&gt;JDEE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/buzztaiki/malabar-mode"&gt;malabar-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/senny/emacs-eclim/"&gt;Eclime for Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emacs-java/auto-java-complete"&gt;Auto Java Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CEDET Developer Version (&lt;a href="http://cedet.sourceforge.net/bzr-repo.shtml"&gt;Bazaar repo&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Немного впечатлений о каждом расширении. Все  пробовал на &lt;em&gt;MacBook Air&lt;/em&gt;, &lt;em&gt;OS X&lt;/em&gt;,
&lt;em&gt;Emacs 24.3.1&lt;/em&gt; из &lt;a href="http://macports.org/"&gt;MacPorts&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;JDEE&lt;/h2&gt;
&lt;p&gt;Старое и  похоже переставшее развиваться  расширение. Сразу не  понравилось, что
тянет с  собой свою цветовую  схему.  Мелочи, но  они всегда бросаются  в глаза.
Также  &lt;em&gt;JDEE&lt;/em&gt; каким-то  образом  умудряется  нарушить работу  &lt;code&gt;whitespace-mode&lt;/code&gt;,
который перестает подсвечивать вообще что-либо.  Данную проблему решить не смог.
Есть у меня подозрение, что это  связано с перекрашиванием буфера, но глубока не
капал  за ненадобностью.   Нечто похожее  сейчас  есть в  &lt;code&gt;markdown-mode&lt;/code&gt;. Ну  и
каких-то особых возможностей здесь не  нашел.  Все плюшки сделаны через &lt;em&gt;Cedet&lt;/em&gt;,
соответственно их можно получить и без &lt;em&gt;JDEE&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Malabar-mode&lt;/h2&gt;
&lt;p&gt;Завязан   на   &lt;em&gt;Maven&lt;/em&gt;,   про   который  ранее   слышал   совсем   чуть-чуть   и
отдаленно. Быстренько глянул,  как работать с этим  менеджером проектов.  Создал
тестовый проект, но производительность  &lt;code&gt;malabar-mode&lt;/code&gt; вообще не порадовала.  Он
как  я понял  использует &lt;em&gt;Groovy&lt;/em&gt;  console  для формирования  дополнений. И  это
похоже   порой  не   быстрый  процесс.    В   общем  от   этого  варианта   тоже
отказался.   Кроме  того   проект  также   загибается.  Хотя   в  знакомстве   с
&lt;code&gt;malabar-mode&lt;/code&gt; есть свой плюс: я узнал что такое &lt;em&gt;Maven&lt;/em&gt; и как с ним работать.&lt;/p&gt;
&lt;h2&gt;Eclime&lt;/h2&gt;
&lt;p&gt;Вот это вообще монстр.  Идея затащить в &lt;em&gt;Emacs&lt;/em&gt; (изначально в &lt;em&gt;Vim&lt;/em&gt;) функционал &lt;em&gt;Eclipse&lt;/em&gt; через некий
интерфейс тоже  на деле  оказывается не шибко  производительна. В  данном случае
&lt;em&gt;eclime&lt;/em&gt;  запускает &lt;em&gt;Eclipse&lt;/em&gt;  на  заднем плане  и общается  с  ним, чтобы  получить
автодополнения  и еще  некоторый функционал  (рефакторинг, навигация  по коду  и
т.п.). Скорость отзывчивости данной системы еще меньше, чем у &lt;em&gt;Malabar&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Auto Java Complete&lt;/h2&gt;
&lt;p&gt;Смысл данного расширения прост:  сгенерировать теги необходимых &lt;em&gt;Java&lt;/em&gt; библиотек
и предоставить интерфейс для  &lt;code&gt;auto-complete&lt;/code&gt;. Я попробовал использовать готовые
теги  и это  работает достаточно  быстро  и удобно.  Но тут  мы получаем  только
информацию  системных библиотек  и того  что сами  укажем ручками  при генерации
тегов.  В  принципе в связке со  стандартным &lt;em&gt;Cedet&lt;/em&gt; идущим с  &lt;em&gt;Emacs&lt;/em&gt;'ом должно
всего этого хватить.&lt;/p&gt;
&lt;h2&gt;Cedet Dev&lt;/h2&gt;
&lt;p&gt;Самый  удобный,  как мне  кажется,  вариант  это использовать  последнюю  версию
&lt;em&gt;Cedet&lt;/em&gt;  из  &lt;em&gt;Bazaar&lt;/em&gt; репозитория.   Тут  сейчас  &lt;em&gt;Java&lt;/em&gt; хорошо  поддерживается.
&lt;em&gt;Maven&lt;/em&gt;  проекты кстати  тоже  отлично воспринимаются.   По  работе и  настройке
&lt;em&gt;Cedet&lt;/em&gt; лучше обращаться к &lt;a href="http://alexott.net/ru/writings/emacs-devenv/EmacsCedet.html"&gt;статье Alex Ott'а&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;На  данный   момент  я  остановился   на  последнем  варианте:  &lt;em&gt;Cedet&lt;/em&gt;   Dev  +
&lt;code&gt;auto-complete&lt;/code&gt;. Есть  у кого  еще предложения  как улучшить  жизнь в  Emacs при
работе с &lt;em&gt;Java&lt;/em&gt;?  Или все таки &lt;em&gt;Cedet&lt;/em&gt;  это наше все и смотреть в другие стороны
лучше не стоит?&lt;/p&gt;</summary><category term="emacs"></category><category term="java"></category></entry><entry><title>Blogger пост из Emacs? Markdown + Googlecl script</title><link href="http://puzan.info/linux/2013-01-24-blogger-post-iz-emacs-markdown-googlecl-script.html" rel="alternate"></link><published>2013-01-24T00:00:00+04:00</published><author><name>Ilya Zonov</name></author><id>tag:puzan.info,2013-01-24:linux/2013-01-24-blogger-post-iz-emacs-markdown-googlecl-script.html</id><summary type="html">&lt;p&gt;Побаловался  с  &lt;em&gt;googlecl&lt;/em&gt;.   Умудрился   случайно  наделать  множество  постов,
состоящих всего  лишь из одного  слова в своем &lt;a href="http://puzan-read.blogspot.ru" title="Чего начитался…"&gt;читальном  блоге&lt;/a&gt;.  Сейчас
вроде бы все исправил.  Постараюсь  подобное предотвращать в будущем. Но главное
— проверил,  что &lt;em&gt;googlecl&lt;/em&gt;  работает. Далее  хочу обсудить  варианты публикации
сообщений из &lt;em&gt;Emacs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ранее  для   написания  заметок   я  использовал   &lt;em&gt;&lt;a href="http://mwolson.org/projects/EmacsMuse.html" title="Emacs Muse"&gt;muse-mode&lt;/a&gt;&lt;/em&gt;.   Каждая
&lt;em&gt;muse&lt;/em&gt;-заметка экспортировалась в  &lt;em&gt;html&lt;/em&gt;.  А далее я ручками  копировал в форму
&lt;a href="http://blogger.com" title="Blogger"&gt;Блоггера&lt;/a&gt;  нужный  контент.   Долго  я пользовался  именно  этой  схемой.
&lt;em&gt;Muse&lt;/em&gt; в какой-то  момент перестал удовлетворять моим требованиям.   Были у него
некоторые проблемы со вложенными списками и вставками кода. А всякие списки я ой
как  люблю.  Это  наверное последствия  долгого использования  &lt;em&gt;org-mode&lt;/em&gt;. Ну  а
потом я вообще перестал что-либо публиковать в сети.&lt;/p&gt;
&lt;p&gt;Также когда-то я пробовал наладить &lt;em&gt;google&lt;/em&gt;  интерфейс, который шел в поставке с
&lt;em&gt;emacsspeak&lt;/em&gt;. Но  безуспешно. Интересно в  каком состоянии он сейчас?   Давно не
слышал.&lt;/p&gt;
&lt;p&gt;Теперь я собираюсь изобрести новый  велосипед. В его основе &lt;em&gt;&lt;a href="http://daringfireball.net/projects/markdown/" title="Markdown"&gt;Markdown&lt;/a&gt;&lt;/em&gt; и
&lt;em&gt;&lt;a href="http://code.google.com/p/googlecl" title="googlecl"&gt;Googlecl&lt;/a&gt;&lt;/em&gt;.  Собственно смысл  в том, чтобы написать  мини скрипт на
&lt;em&gt;bash&lt;/em&gt;, который переведет &lt;em&gt;md&lt;/em&gt;-файл  в &lt;em&gt;html&lt;/em&gt; (&lt;a href="http://www.freewisdom.org/projects/python-markdown" title="python-markdown"&gt;python-markdown&lt;/a&gt;).  При
этом  он  должен  вырезать  избыточные поля.   Например,  заголовок,  который  в
блоггере в  отдельное поле  вводится.  Далее отправить  это добро  в &lt;em&gt;googlecl&lt;/em&gt;,
который  успешно опубликует  новую заметку  с правильным  заголовком и  тегами в
нужном месте.  То есть из &lt;em&gt;Emacs&lt;/em&gt;  надо будет дернуть этот скриптик и собственно
все.&lt;/p&gt;
&lt;p&gt;Как вариант можно  написать полностью тоже самое на &lt;em&gt;elisp&lt;/em&gt;,  но хочется простой
возможности публиковать  файлы из консоли. Также  я пока не совсем  понимаю, как
настроить раскраску  кода при  конвертировании &lt;em&gt;md&lt;/em&gt;  в &lt;em&gt;html&lt;/em&gt;,  но думаю  с этим
больших проблем не должно быть.&lt;/p&gt;
&lt;p&gt;Как вам такая схема? Не слишком  ли я заворачиваю? Сейчас буду реализовывать это
добро.&lt;/p&gt;</summary><category term="emacs"></category><category term="google"></category></entry></feed>