<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Puzan's Pages - devops</title><link href="https://puzan.info/" rel="alternate"></link><link href="https://puzan.info/feeds/tag/devops.atom.xml" rel="self"></link><id>https://puzan.info/</id><updated>2020-05-10T13:45:00+03:00</updated><entry><title>Параметризованные роли в Ansible</title><link href="https://puzan.info/linux/2020-05-10-parametrizovannye-roli-v-ansible.html" rel="alternate"></link><published>2020-05-10T13:45:00+03:00</published><updated>2020-05-10T13:45:00+03:00</updated><author><name>Ilya Zonov</name></author><id>tag:puzan.info,2020-05-10:/linux/2020-05-10-parametrizovannye-roli-v-ansible.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Никогда не было и вот снова&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;В очередной раз возвращаюсь к своему маленькому бложику. На этот раз после 4-х летнего перерыва. Будем считать на это повлияли смена работы и самоизоляция. Продолжить я решил с небольшой заметки про нежно любимый мной &lt;em&gt;Ansible&lt;/em&gt;. А точнее про его волшебные особенности работы с переменными …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Никогда не было и вот снова&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;В очередной раз возвращаюсь к своему маленькому бложику. На этот раз после 4-х летнего перерыва. Будем считать на это повлияли смена работы и самоизоляция. Продолжить я решил с небольшой заметки про нежно любимый мной &lt;em&gt;Ansible&lt;/em&gt;. А точнее про его волшебные особенности работы с переменными и ролями. Мне всегда хотелось видеть в ролях &lt;em&gt;Ansible&lt;/em&gt; жесткую изоляцию. Но это конечно совсем не так. Разберу на примере, то что я имею в виду, основываясь на поведении &lt;em&gt;Ansible 2.9.7&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ansible&lt;/em&gt; я очень активно использовал на работе в &lt;em&gt;Qligent&lt;/em&gt; для автоматизации ручных инструкций по установке продукта. В результате за 3-4 года сформировалась достаточно большая база кастомных ролей и плейбуков. Ну а сейчас я использую &lt;em&gt;Ansible&lt;/em&gt; исключительно для настройки домашнего &lt;em&gt;HP MicroServer&lt;/em&gt;, на котором крутится парочка локальных сервисов в &lt;em&gt;docker&lt;/em&gt; контейнерах. Каждый сервис фактически представляет собой &lt;code&gt;docker-compose.yml&lt;/code&gt;, специфичные конфиги и директории, с которыми он работает.&lt;/p&gt;
&lt;p&gt;Итак, во время написания ролей для локальных сервисов я решил вынести повторяющиеся действия необходимые для инициализации в отдельную роль. Назовем ее &lt;code&gt;puzan_service&lt;/code&gt;. Туда попали:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;создание отдельного пользователя&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt;'ы&lt;/li&gt;
&lt;li&gt;создание директории с именем сервиса&lt;/li&gt;
&lt;li&gt;определение необходимых фактов&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ну и роль сама получила как минимум один параметр, который определяет ее поведение - &lt;code&gt;puzan_service_name&lt;/code&gt;. В упрощенном варианте это имя директории, в которую в последующем копируется &lt;code&gt;compose&lt;/code&gt; файл. Теперь для инициализации сервисов достаточно в &lt;code&gt;meta&lt;/code&gt; добавлять нечто вроде:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;puzan_service&lt;/span&gt;
    &lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;puzan_service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;usefull_service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Примерно тут мои ожидания несколько расходятся с реальностью. Указанный подход отлично работает. Более того на текущий момент похоже это &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html#role-dependencies"&gt;официальный подход&lt;/a&gt; для подключения ролей с параметрами в качестве зависимостей. Но есть нюанс — после выполнения роли в контексте останется переменная &lt;code&gt;puzan_service_name&lt;/code&gt;. В целом может показаться, что это не страшно. Но меня это не устраивает: &lt;code&gt;puzan_service&lt;/code&gt; предназначена для множественного использования, а это значит каждый ее запуск не должен быть связан с предыдущим. В текущем примере &lt;code&gt;puzan_service_name&lt;/code&gt; обязательный параметр и его каждый раз необходимо определять. Но что, если у роли будет еще необязательный параметр или кто-то допустит опечатку в имени переменной? Это приведет к неожиданному поведению и вероятно сложному поиску причины ошибки, так как роль может выполнится со старыми значениями переменных.&lt;/p&gt;
&lt;p&gt;Я начал работать с &lt;em&gt;Ansible&lt;/em&gt; где-то около версии 1.9. И как ни странно там был немного &lt;a href="https://docs.ansible.com/ansible/2.3/playbooks_roles.html#role-dependencies"&gt;другой метод&lt;/a&gt; определения зависимостей с переменными:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;puzan_service&lt;/span&gt;
    &lt;span class="nt"&gt;puzan_service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;usefull_service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Данный метод также до сих пор работает. Но более удивительно то, что он работает, как я хочу: &lt;code&gt;puzan_service_name&lt;/code&gt; не попадает в глобальный контекст. Я подготовил &lt;a href="https://github.com/puzan/ansible_role_vars_tests"&gt;небольшой репозиторий&lt;/a&gt; с тестами данного поведения. Кроме использования meta &lt;code&gt;dependencies&lt;/code&gt; там также продемонстрирована работа использования ролей в playbook'ах, а также разница поведения &lt;code&gt;import_role&lt;/code&gt; и &lt;code&gt;include_role&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Следует отменить, что из всех конструкций только &lt;code&gt;include_role&lt;/code&gt; на текущий момент имеет явный механизм контроля доступа к переменным снаружи. Это реализовано через &lt;a href="https://docs.ansible.com/ansible/latest/modules/include_role_module.html"&gt;параметр &lt;code&gt;public&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Уже давненько имеются issues на github'е на эту тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible/issues/63558"&gt;https://github.com/ansible/ansible/issues/63558&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible/issues/43543"&gt;https://github.com/ansible/ansible/issues/43543&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Исправляться они не спешат. Один из моих PR'ов в ansible, был замержен всего лишь за &lt;a href="https://github.com/ansible/ansible/pull/19073"&gt;3 года&lt;/a&gt;. Поэтому я не думаю, что тут что-то быстро изменится.&lt;/p&gt;
&lt;p&gt;В целом мои рекомендации свозятся к следующему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Используйте только вариант передачи параметров в роль без &lt;code&gt;vars&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Не используйте &lt;code&gt;import_role&lt;/code&gt; и &lt;code&gt;include_role&lt;/code&gt; с &lt;code&gt;public: yes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Есть конечно исключения: &lt;em&gt;В любой непонятной ситуации — думай!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В итоге. Будьте внимательны и пишите больше тестов. Даже на роли в &lt;em&gt;Anisble&lt;/em&gt;. Переменные и факты в &lt;em&gt;Ansible&lt;/em&gt; здоровенная перемешенная куча. &lt;em&gt;Ansible&lt;/em&gt; к сожалению сам не дает никаких явных инструментов по ограничению доступов к ним. Поэтому тут надежда только на Вас самих и на практики, которые вы используете. Ниже небольшая сводка по описанному поведению для версии &lt;em&gt;Ansible&lt;/em&gt; 2.9.7&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Использование в playbook'ах и meta &lt;code&gt;dependencies&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Поведение одинаковое при подключении ролей в playbook'ах и через &lt;code&gt;dependencies&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Без &lt;code&gt;vars&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Playbook пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- name: Playbook
  hosts: localhost
  roles:
    - role: some_role
      some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Meta role пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dependencies:
  - role: some_role
    some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;some_role_var&lt;/code&gt; не доступна во внешнем контексте до и после запуска роли&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C &lt;code&gt;vars&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Playbook пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- name: Playbook
  hosts: localhost
  roles:
    - role: some_role
      vars:
        some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Meta role пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dependencies:
  - role: some_role
    vars:
      some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;some_role_var&lt;/code&gt; доступна во внешнем контексте до и после запуска роли&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Использование &lt;code&gt;import_role&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- import_role:
  name: some_role
  vars:
    some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;some_role_var&lt;/code&gt; доступна во внешнем контексте до и после запуска роли&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Использование &lt;code&gt;include_role&lt;/code&gt; с &lt;code&gt;public: no&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- include_role:
    name: some_role
    public: no
  vars:
    some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;some_role_var&lt;/code&gt; не доступна во внешнем контексте до и после запуска роли&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Использование &lt;code&gt;include_role&lt;/code&gt; с &lt;code&gt;public: yes&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- include_role:
    name: some_role
    public: yes
  vars:
    some_role_var: some
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;some_role_var&lt;/code&gt; не доступна во внешнем контексте до запуска роли, но доступна после.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И в виде таблички:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Кейс&lt;/th&gt;
&lt;th&gt;Переменные до&lt;/th&gt;
&lt;th&gt;Переменные после&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;roles&lt;/code&gt; без &lt;code&gt;vars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Не доступны&lt;/td&gt;
&lt;td&gt;Не доступны&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;roles&lt;/code&gt; с &lt;code&gt;vars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Доступны&lt;/td&gt;
&lt;td&gt;Доступны&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;import_role&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Доступны&lt;/td&gt;
&lt;td&gt;Доступны&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;include_role&lt;/code&gt;, &lt;code&gt;public: no&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Не доступны&lt;/td&gt;
&lt;td&gt;Не доступны&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;include_role&lt;/code&gt;, &lt;code&gt;public: yes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Не доступны&lt;/td&gt;
&lt;td&gt;Доступны&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="linux"></category><category term="ansible"></category><category term="devops"></category></entry></feed>